package main

import "fmt"

// Отправка данных в канал a.
// a <- dataInt

// Получение данных из канала a.
// dataInt := <- a

// !!! Отправка и получение данных из канала - блокирующая операция. == Синхронизация горутин.
// Если данные отправлены в канал, то выполнение текущей горутины останавливается до тех пор,
// пока с другой стороны канала не будут считаны данные.
// Если производится чтение из канала, то выполнение текущей горутины останавливается до тех пор, пока
// в этот канал не будут отправлены данные.

// !!! "Тяжелые" типы можно отправлять по указателю.
// Не следует отправлять через каналы - функции/панику.

func newGoRoutine(done chan bool) {
	fmt.Println("Hey, I'm new Goroutine!")
	done <- true
}

func main() {
	done := make(chan bool)
	go newGoRoutine(done)
	// !!! В этой точке выполнение горутины main останавливается до тех пор, пока в канал кто-нибудь не запишет данные.
	<-done

	fmt.Println("Main Goroutine work!")
}
