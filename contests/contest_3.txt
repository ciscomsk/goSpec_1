https://contest.yandex.ru/contest/25667/

__A
package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

func main() {
	var (
		serviceCount int
		ourCount int
		films [1000]string
	)

	fmt.Scan(&serviceCount)
	fmt.Scan(&ourCount)

	reader := bufio.NewReader(os.Stdin)

	for i := 1; i <= serviceCount; i++ {
		filmName, _ := reader.ReadString('\n')
		filmName = strings.Replace(filmName, "\n", "", -1)
		films[i - 1] = filmName
	}

	for i := 1; i <= ourCount; i++ {
		filmName, _ := reader.ReadString('\n')
		filmName = strings.Replace(filmName, "\n", "", -1)

		maxCheckIdx := serviceCount - 1

		for idx, val := range films {
			if val == filmName {
				fmt.Println("ЕСТЬ")
				break
			}

			if idx >= maxCheckIdx {
				fmt.Println("НЕТ В НАЛИЧИИ")
				break
			}
		}
	}
}


__B
package main

import "fmt"

func main() {
	var line string

	fmt.Scan(&line)

	runeSlice := []rune(line)
	endIdx := len(runeSlice) - 1
	if (runeSlice[0] == 'Д' || runeSlice[0] == 'д') && (runeSlice[endIdx] == 'А' || runeSlice[endIdx] == 'а') || (runeSlice[0] == 'А' || runeSlice[0] == 'а') && (runeSlice[endIdx] == 'Д' || runeSlice[endIdx] == 'д') {
		fmt.Println("СОГЛАСЕН")
		return
	}
	fmt.Println("НЕ СОГЛАСЕН")
}


__C
package main

import (
	"fmt"
	"unicode/utf8"
)

func main() {
	var (
		firstWord string
		secondWord string
		firstWordLength int
		firstWordLastLetter rune
		secondWordFirstLetter rune
	)

	fmt.Scan(&firstWord)

	for {
		fmt.Scan(&secondWord)

		firstWordLength = utf8.RuneCountInString(firstWord)

		firstWordLastLetter = ([]rune(firstWord))[firstWordLength - 1]
		secondWordFirstLetter = ([]rune(secondWord))[0]

		if firstWordLastLetter != secondWordFirstLetter {
			fmt.Println(secondWord)
			break
		}

		firstWord = secondWord
	}
}


__D
package main

import (
	"fmt"
	"unicode/utf8"
)

func main() {
	var (
		firstWord string
		secondWord string
		firstWordLength int
		firstWordLastLetter rune
		secondWordFirstLetter rune
	)

	fmt.Scan(&firstWord)

	for {
		fmt.Scan(&secondWord)

		firstWordLength = utf8.RuneCountInString(firstWord)

		firstWordLastLetter = ([]rune(firstWord))[firstWordLength - 1]
		secondWordFirstLetter = ([]rune(secondWord))[0]

		if firstWordLastLetter == 'ь' || firstWordLastLetter == 'Ь' {
			firstWord2LastLetter := ([]rune(firstWord))[firstWordLength - 2]

			if firstWord2LastLetter != secondWordFirstLetter {
				fmt.Println(secondWord)
				break
			}

		} else if firstWordLastLetter != secondWordFirstLetter {
			fmt.Println(secondWord)
			break
		}

		firstWord = secondWord
	}
}


__E
package main

import "fmt"

func main() {
	var (
		line string
		res []rune
	)

	fmt.Scan(&line)

	for idx, rune :=  range []rune(line) {
		if idx % 2 == 0 {
			for i := 1; i <=3; i++ {
				res = append(res, rune)
			}
		}
	}

	fmt.Println(string(res))
}


__F
package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

func main() {
	var (
		bite int = 1
		slice []rune
	)

	reader := bufio.NewReader(os.Stdin)
	word, _ := reader.ReadString('\n')
	word = strings.Trim(strings.Replace(word, "\n", "", -1), " ")

	fmt.Println(word)

	slice = []rune(word)

	for {
		if len(slice) <= 2 {
			return
		}

		if bite % 2 != 0 {
			slice = slice[2:]
			fmt.Println(string(slice))
			bite += 1

			if len(slice) <= 2 {
				break
			}
			continue
		}

		if len(slice) <= 2 {
			return
		}

		sliceLength := len(slice)
		slice = slice[:sliceLength - 2]
		fmt.Println(string(slice))
		bite += 1

		if len(slice) <= 2 {
			break
		}
		continue
	}
}


__G
package main

import "fmt"

func main() {
	var (
		line string
		max int
		curr int
	)

	fmt.Scan(&line)
	runeSlice := []rune(line)

	for _, runeVal := range runeSlice {
		if runeVal == 'о' {
			curr++
			if curr > max {
				max = curr
			}
			continue
		}
		curr = 0

	}
	fmt.Println(max)
}


__H
package main

import "fmt"

func main() {
	var (
		numCount int
		num int
		startPos int
		endPos int
		nums [100]int
		sum int
	)

	fmt.Scan(&numCount)

	for i := 1; i <= numCount; i++ {
		fmt.Scan(&num)
		nums[i - 1] = num
	}

	fmt.Scan(&startPos)
	fmt.Scan(&endPos)

	for i := startPos; i <= endPos; i++ {
		sum += nums[i - 1]
	}
	fmt.Println(sum)

}


__I
// !!! c fmt.Scan(&taskCount) - не проходит.
package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	var (
		taskCount      int
		allTasks       [100]string
		remainderCount int
		taskIdx        int
		remainderTasks [100]string
	)

	reader := bufio.NewReader(os.Stdin)

	//fmt.Scan(&taskCount)
	taskCountS, _ := reader.ReadString('\n')
	taskCountS = strings.Replace(taskCountS, "\n", "", -1)
	taskCount, _ = strconv.Atoi(taskCountS)

	for i := 1; i <= taskCount; i++ {
		task, _ := reader.ReadString('\n')
		task = strings.Replace(task, "\n", "", -1)
		allTasks[i-1] = task
	}
	//fmt.Println(allTasks)

	//fmt.Scan(&remainderCount)
	remainderCountS, _ := reader.ReadString('\n')
	remainderCountS = strings.Replace(remainderCountS, "\n", "", -1)
	remainderCount, _ = strconv.Atoi(remainderCountS)


	for i := 1; i <= remainderCount; i++ {
		//fmt.Scan(&taskIdx)
		taskIdxS, _ := reader.ReadString('\n')
		taskIdxS = strings.Replace(taskIdxS, "\n", "", -1)
		taskIdx, _ = strconv.Atoi(taskIdxS)

		remainderTasks[i-1] = allTasks[taskIdx-1]
	}

	for i := 0; i <= remainderCount-1; i++ {
		fmt.Println(remainderTasks[i])
	}
}
