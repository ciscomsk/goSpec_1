__2_H
func main() {
	var shotCount, numerator, denominator, resNumerator, resDenominator, commonDenominator int

	fmt.Scan(&shotCount)
	init := true

	for i := 1; i <= shotCount; i++ {
		fmt.Scan(&numerator)
		fmt.Scan(&denominator)

		if numerator == 0 || denominator == 0 {
			continue
		}

		if init {
			resNumerator = numerator
			resDenominator = denominator

			init = false
			continue
		}

		commonDenominator = resDenominator * denominator
		resNumerator = resNumerator * commonDenominator / resDenominator + numerator * commonDenominator / denominator
		resDenominator = commonDenominator
	}

	if shotCount > 0 && resNumerator != 0 && resDenominator != 0 {
		var a, b = resNumerator, resDenominator

		for a != b {
			if a > b {
				a -= b
			} else {
				b -= a
			}
		}

		fmt.Printf("%d/%d", resNumerator/a, resDenominator/a)
	} else {
		fmt.Printf("0/0")
	}
}




__4_ะก
func main() {
	var (
		height int
		length int
		sym    string
		spacesCount int
	)

	fmt.Scan(&height, &length, &sym)
	spacesCount = length - 2

	for i := 1; i <= height; i++ {

		if i == 1 || i == height {
			for j := 1; j <= length; j++ {
				fmt.Print(sym)
			}

			if i == 1 {
				fmt.Println()
			}
		} else {
			fmt.Print(sym)

			for j := 1; j <= spacesCount; j++ {
				fmt.Print(" ")
			}

			fmt.Print(sym)
			fmt.Println()
		}
	}
}



__5_A
func Factorial(i uint) uint {
	if i > 0 {
		return i * Factorial(i - 1)
	}
	return 1
}

func combination(n uint, m uint) uint {
	return Factorial(n) / (Factorial(m) * Factorial(n - m))
}

func main() {
	var set, subset uint

	fmt.Scan(&set, &subset)
	fmt.Println(combination(set, subset))
}









